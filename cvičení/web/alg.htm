<HTML>
<HEAD>
<TITLE></TITLE>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1250"> 
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<P align="justify"><big>Metoda zcitlivìní cesty</big><br>
Generování testù je klíèovou úlohou diagnostiky, avšak je to též úloha nejtìžší  a lze øíci, že doposud nebyla uspokojivì vyøešena. Pøi manuálním sestavování testu se obvykle postupuje metodou zcitlivìní cesty.  Pro zdùraznìní její obtížné algoritmizovatelnosti se nìkdy oznaèuje též jako intuitivní zcitlivìní cesty.<BR>
Pro svou jednoduchost patøí metoda stále k nejpoužívanìjším, zejména pokud je tøeba generovat test ruènì.
Základem této metody je sestavení pøenosové cesty z místa výskytu poruchy na nìkterý z výstupù testované jednotky.<BR>
</P>
<P align="justify"><big>Princip citlivé cesty</big><br>
Jako cestu v logickém obvodu oznaèíme sled vodièù a logických èlenù, které jsou navzájem propojeny. Cesta je citlivá, je-li schopna pøenášet zmìny signálu ze svého zaèátku na jeho konec. Citlivou cestu sestavujeme vždy tak, aby pøenášela signál o poruše z místa jejího výskytu na výstup. Toto sestavení je založeno na znalosti pravidel prùchodu citlivé cesty jednotlivými typy logických èlenù. <BR>
<table width="60%" border="0" align="center" cellspacing="10">
<tr><td align="center"><IMG src="cesta1.gif"></td><td align="center"><IMG src="cesta2.gif"></td></tr>
<tr><td colspan="2" align="center"><i>Obrázek 1 - Prùchod citlivé cesty pøes èlen AND a OR</i><BR>&nbsp;</td></tr>
</table>
Má-li citlivá cesta procházet ze vstupu na výstup èlenu souèinového typu (AND,NAND), musíme na všechny ostatní vstupy pøivést hodnotu 1. Podobnì pro zajištìní prùchodu citlivé cesty ze vstupu na výstup souètového typu (OR,NOR) musíme na všechny ostatní vstupy pøivést hodnotu 0. Invertorem prochází citlivá cesta vždy. Podobnì prochází citlivá cesta vždy ze vstupu na výstup èlenu nonekvivalence. Cílem zcitlivìní je pøenést zmìnu, pøièemž není vùbec dùležité, zda je její polarita zachována nebo ne.
</P>
<P align="center"><IMG src="cesta3.gif"><BR><i>Obrázek 2 - Citlivá cesta v logickém obvodu <BR>(polarita zmìny není zachována)</i></P>
<P align="justify"><big>Generování jednoho kroku testu</big><br>
Postup nalezení jednoho kroku testu lze popsat takto:
<OL type="1">
<LI>Volba poruchy, která má být detekována
<LI>Do místa výskytu poruchy se pøivede opaèná hodnota (1 v pøípadì poruchy t0 a naopak 0 pøi t1)
<LI>Z místa poruchy sestavíme citlivou cestu na primární výstup
<LI>Odvodíme chybìjící hodnoty promìnných na primárních vstupech
<LI>Nalezneme poruchy pokryté tímto sestaveným krokem testu
</OL>
Pøi generování úplného testu se popsaných pìt bodù cyklicky opakuje, dokud není nalezen úplný test, tj. dokud nejsou pokryty všechny poruchy t0 a t1 na všech vodièích. Pøed zahájením  generování testu proto musíme sestavit seznam poruch, které má test detekovat. Vyèerpání tohoto seznamu, tj. pokrytí všech poruch v nìm uvedených, budeme pak považovat za dùkaz úplnosti testu.<BR>
Po sestavení testu je úèelné najít všechny poruchy, které tento krok testu detekuje, protože jinak bychom pozdìji vytváøeli nadbyteèné kroky testu. Za pokryté mùžeme považovat poruchy na citlivých cestách, které v daném kroku vedou na primární výstupy obvodu. Na každém vodièi v citlivé cestì je ale pokryta vždy jen ta porucha, která je opaèná k pøenášené hodnotì.</P> 
<UL>
<LI><i>Pøíklad</i><BR>
Sestavený úplný detekèní test pro obvod z obrázku 3 (tentýž obvod jako na obr.2, s pojmenovanými vodièi)<BR>
<center><IMG src="cesta4.gif"><BR><i>Obrázek 3</i></center>
<center><IMG src="cesta5.gif"></center>
Jednotlivé øádky tabulky odpovídají krokùm testu. V pravé èásti tabulky je uvedeno, které poruchy tento krok pokrývá.
Všimnìte si, že v každém sloupci se nachází znaèka t0 i t1. To znamená, že uvedený test je úplný a pokrývá všechny poruchy.<BR> 
Generování testu ruènì ani pro takovýto jednoduchý obvod není pøíjemné a lze se snadno splést. Zde uvedený test je výstupem programu <A href="test.htm">TEST</A>, který generuje úplné testy pro kombinaèní obvody. Vyzkoušejte si, jak snadno lze vygenerovat test pro uvedený obvod tímto programem. Popis obvodu je: 
<PRE>
	Y=/(BCE)
	E=A+B</pre>
</UL>
<P align="justify"><big>Podmínky úplnosti testu</big><br>
Pro obvod bez vìtvení vodièù (exituje ale vùbec takový v praxi ?) platí, že staèí testovat pouze primární vstupy, protože nehrozí riziko konfliktu nebo neøešitelné situace. To je zpùsobeno tím, že obvod má stromovou strukturu a nedochází k vìtvení a opìtovnému sbíhání signálových cest. Naproti tomu existence vìtvení vodièù komplikuje postup zcitlivìní cesty hned ze dvou dùvodù. Jednak nás nutí volit mezi nìkolika cestami z místa výskytu poruchy na primární výstup(y), za druhé mùže zpùsobit konflikty mezi požadavky na vstupní hodnoty logických èlenù, pøipojených na tentýž vìtvící se vodiè.
Test budeme považovat za úplný vùèi všem poruchám typu t, pokrývá-li poruchy t0 a t1 na nevìtvících se primárních vstupech a na všech vìtvích za body vìtvení. 
<UL>
<LI><i>Pøíklad</i><BR>
Úplný test pro obvod na obrázku 4.
<center><IMG src="cesta6.gif"><BR><i>Obrázek 4</i></center>
<center><IMG src="cesta7.gif"></center><BR>
Test je úplný, protože pokrývá poruchy na všech primárních vstupech a vìtvích za body vìtvení. Zobrazený test je opìt získán jako výstup programu <A href="test.htm">TEST</A>. Porovnejte èas strávený generováním testu ruènì a programem. Popis obvodu je: 
<PRE>
	Y=FG
	F=A+D
	G=E+C
	D=B
	E=B</pre>
</UL>
<P align="justify"><big>Testování redundantních obvodù</big><br>
Jako redundantní oznaèujeme souèástku, kterou lze ze správnì fungujícího obvodu vyjmout a  nahradit zdrojem konstantního signálu 0 nebo 1, aniž by se tím zmìnila výstupní funkce obvodu. Test redundantního obvodu nemùže být nikdy úplný, tzn. nemùže nám poskytnout informaci o technickém stavu všech souèástek použitých v obvodu. Výskyt redundance v praxi zdaleka není vzácností a její odstranìní není vždy možné. Redundantní implikanty se používají obvykle pro odstranìní statického hazardu. V pøípadì redundantního obvodu považujeme test za úplný, pokud detekuje všechny detekovatelné poruchy v neredundantní èásti. Dále je tøeba vyjmenovat poruchy, které jsou nedetekovatelné. 
<UL>
<LI><i>Pøíklad</i><BR>
Úplný test pro obvod na obrázku 5.
<center><IMG src="cesta9.gif"><BR><i>Obrázek 5</i></center>
<center><IMG src="cesta8.gif"><BR>
<b>Nedetekovatelné poruchy</b>: B/t1 B/t0 B1/t1 B2/t1 </center><BR>
Obvod na obr. 5 je redundantní. Funkci obvodu lze popsat rovnicí F=A, takže redundance je zøejmá (signál B nemá vliv na výstupní hodnotu). Program <A href="test.htm">TEST</A> v pøípadì redundantních obvodù vygenereju test pokrývající všechny detekovatelné poruchy a zobrazí výèet nedetekovatelných poruch. Chcete-li si to vyzkoušet, zde je popis obvodu z obr. 5:<BR>
<pre>
	Y=C+D
	C=A1 B1
	D=B2 A2
	B1=/B
	B2=B
	A1=A
	A2=A
</pre>
</UL>
<P align="justify"><big>Rekonvergentní cesty</big><br>
Cesty, které se rozbíhají v jednom bodì vìtvení a sbíhají na vstupu jednoho logického èlenu se oznaèují jako rekonvergentní. Pokud bychom zcitlivili souèasnì obì cesty, které mají rùznou paritu inverze (tj. poèet inverujících èlenù na citlivé cestì modulo 2), pøenášela by jedna cesta signál s nezmìnìnou polaritou a druhá s opaènou, takže by se zmìny vykompenzovaly na vstupu spoleèného logického èlenu. Kvùli tomu by nebylo možné detekovat poruchy spoleèné èásti obou cest pøed bodem vìtvení.
<UL>
<LI><i>Pøíklad</i><BR>
Snažíme se nalést test detekující poruchu A/t0 pro obvod na obr.6 .<BR>
Signál A se vìtví na vìtve B a C. Obì vìtve se spojují v souèinovém èlenu, jde tedy o rekonveregentní vìtve. Parita inverze ve vìtvích je rùzná. Zatímco vìtev C pøenáší signál s nezmìnìnou polaritou, tak vìtev B-D ho invertuje. Tyto zmìny se vykompenzují na vstupu spoleèného logického èlenu, takže poruchy na spoleèné èásti obou cest pøed bodem vìtvení nelze detekovat. Neexistuje tedy test, který detekuje poruchu t0 nebo t1 na vstupu A. (poznámka: lze ale detekovat urèité poruchy v rozvìtvené èásti na signálech B, C, D)<BR>
Následující test je vygenerován programem <A href="test.htm">TEST</A> (kopie z výstupního okna programu) a detekuje všechny detekovatelné poruchy:<BR>
<PRE>
A:0  - Vystupy Y:0  - C/t1 Y/t1 
A:1  - Vystupy Y:0  - B/t0 D/t1 Y/t1 
 
Nedetekovatelné poruchy: A/t1 A/t0 B/t1 C/t0 D/t0 Y/t0</PRE>    
<center><IMG src="image16.gif"><BR><i>Obrázek 6</i></center>
</UL>
<P align="justify"><big>Problematické obvody</big><br>
Metoda zcitlivìní cesty není dokonalá a v nìkterých pøípadech nedokáže nalézt testovací vektor, aèkoliv existuje.
<UL>
<LI><i>Pøíklad</i><BR>
<center><IMG src="problem.gif"><BR><i>Obrázek 7</i><BR></center>
Cílem je nalézt testovací vektor detekující poruchu t1 na výstupu èlenu G1<BR>
<OL type="a">
<LI>Nejprve to zkusíme cestou G3-G6
<OL type="1">
<LI> Nastavení vstupù, buzení poruchy: A=B=1
<LI> Zcitlivìní cesty pøes G3: C=1
<LI> Šíøení poruchy pøes G3. G3=0
<LI> Zcitlivìní cesty pøes G6: musí platit G2=G4=G5=1
<LI> Platí že G2=1 v dùsledku volby A,C
<LI> Aby platilo, že G4=1, musí E=0
<LI> Nelze nastavit G5=1, protože E=0, B=1
</OL>
<LI>Ještì to zkusíme cestou G4-G6
<OL type="1">
<LI> Nastavení vstupu, buzení poruchy: A=B=1
<LI> Zcitlivìní cesty pøes G4: E=1
<LI> Šíøení poruchy pøes G4. G4=0
<LI> Zcitlivìní cesty pøes G6: musí platit G2=G3=G5=1
<LI> Platí že G5=1 v dùsledku volby A,E
<LI> Aby platilo, že G3=1, musí C=0
<LI> Nelze nastavit G2=1, protože C=0, A=1
</OL>
</OL>
Øešení ale existuje a je jím vektor A=B=C=E=1. Tento vektor ovšem klasickou metodou zcitlivìní cesty nelze nalézt. 
Problém spoèívá v rekonvergentních vìtvích s rùznou paritou negace. Tento vektor dále kromì G1/t1 detekuje i následující poruchy:
A/t0 G3/t0 G6/t1 G4/t0 B/t0 C/t0 G2/t0 E/t0 G5/t0. Vytvoøený program <A href="test.htm">TEST</a> spolehlivì nalezne všechny testovací
vektory detekující všechny detekovatelné chyby, vèetnì tìch, na které metoda zcitlivìní cesty nestaèí. Soubor s popisem tohoto problematického obvodu si mùžete stáhnout <A href="obvody.htm">zde</A>.
</UL>
 
</BODY>
</HTML>
