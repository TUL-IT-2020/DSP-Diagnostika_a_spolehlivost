<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1250">  
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
<P align="justify"><BIG>Úvod</BIG><BR>
Strukturu i funkci   testovaného obvodu lze popsat jednoduchým jazykem. Pøekladaè z tohoto jazyka do vnitøní reprezentace obvodu ve formì dynamické struktury je souèástí programù HILDO a TEST. Jazkykem lze popisovat libovolné obvody, které se  mohou pøipojit k posuvnému registru, v pøípadì programu HILDO anebo pro nì lze vygenerovat testovací vektory úplného testu. Je samozøejmì možné vytvoøit vnitøní (zvenèí "neviditelné") vodièe, tedy signály, které nebudou pøipojovány k vstupùm ani výstupùm posuvného registru, ale na kterých lze simulovat pøítomnost poruchy a které odpovídají vnitøní struktuøe obvodu. 
</P>
<P align="justify"><BIG>Gramatika</BIG><BR>

<PRE><B>Lexikální elementy jazyka</B>
&lt;VelkePismeno&gt; ::= ´A´..´Z´
&lt;MalePismeno&gt; ::= ´a´..´z´
&lt;Cislice&gt; ::= ´0´..´9´
&lt;Signal&gt; ::= &lt;VelkePismeno&gt; &lt;MalePismeno&gt;* &lt;Cislice&gt;*
&lt;Negace&gt; ::=  ´ / ´ | ´ - ´
&lt;Plus&gt; ::= ´+ ´
&lt;Rovno&gt; ::= ´ = ´ 
&lt;Decko&gt; ::= ´ #´
&lt;Zavorkal&gt; ::= ´ ( ´
&lt;Zavorkap&gt; ::= ´ ) ´
&lt;Enter&gt; ::= chr(13)
&lt;komentar&gt; ::= ´;´ &lt;LibovolnýZnak&gt;* &lt;Enter&gt; 

<b>Gramatika</b>
T = (signal, rovno, komentar, enter, negace, zavorkap, zavorkal, plus, decko) 
N = (POPIS, RADEK, VYRAZ, A, B, D, N)  ; G = (N, T, P, S) 

S <IMG src="sip.gif" align="middle"> RADEK S | <IMG src="eps.gif" align="top">
RADEK <IMG src="sip.gif" align="middle"> signal rovno VYRAZ K | K
K <IMG src="sip.gif" align="middle"> enter | komentar
VYRAZ <IMG src="sip.gif" align="middle"> A D
A <IMG src="sip.gif" align="middle"> signal B | zavorkal VYRAZ zavorkap B | negace N B | decko signal  B 
B <IMG src="sip.gif" align="middle"> signal B | zavorkal VYRAZ zavorkap B | negace N B | decko signal  B |<IMG src="eps.gif" align="top">
D <IMG src="sip.gif" align="middle"> plus VYRAZ | <IMG src="eps.gif" align="top">
N <IMG src="sip.gif" align="middle"> signal | zavorkal VYRAZ zavorkap
Mezery mezi jednotlivými lexikálními elementy jsou ignorovány
</PRE>
<P align="justify"><BIG>Základní rysy</BIG><BR>
Každý øádek popisu obvodu vyjadøuje pøiøazení výrazu jednomu signálu. Øádek tedy vždy obsahuje na levé stranì jméno signálu, následuje rovnítko a na pravé stránì logický výraz.  Øádek není ukonèen žádným speciálním znakem, jako napø. støedníkem nebo teèkou, ale bìžným ukonèením (enter). Poøadí øádkù mùže být zcela libovolné a nemá sebemenší vliv na výsledek analýzy a funkci obvodu. Pøehozením nìkolika øádkù je tedy vždy popsán jeden a tentýž stejný obvod.  
Jméno signálu musí zaèínat velkým písmenem. Následovat  mohou malá písmena a èíslice. Pøípustná pojmenovaní jsou tedy napøíklad tato: A, B, A1, B125, Bit, Qin. Naopak chybné je SUMA,PRENOS, 1A, 12B, AbC. Øetìzec "SUMA" je pøi analýze vyhodnocen jako výraz "S and U and M and A".  Øetìzec "AbC" by byl potom vyhodnocen jako "Ab and C". Naopak øetìzec "Suma" je brán jako pojmenování signálu názvem "Suma".<BR> 
Názvy signálù se nemusí nijak pøedem deklarovat. Jakmile se pøi analýze popisu obvodu narazí na nové neznámé jméno signálu, je pro nìj automaticky vytvoøen nový volný uzel ve vnitøní reprezentaci obvodu. To platí jak pro signály na levé, tak na pravé stranì rovnic. Na konec každého øádku nebo na samostatný øádek lze vkládat komentáø, za který je považován øetìzec zaèínající støedníkem a pokraèující až na konec øádku.<BR>
Po ukonèení analýzy probìhne fáze, ve které jsou nalezeny vstupy a výstupy obvodu. Za vstupy jsou považovány ty signály, které se vyskytují pouze na pravé stranì všech rovnic. Jsou to tedy signály, kterým není pøiøazena žádná rovnice pro získání jejich hodnoty a oèekává se, že budou napø. pøipojeny na výstupy posuvného registru. <BR>
Za výstupy obvodu jsou považovány ty signály, které se nevyskytují v žádné rovnici na pravé stranì. Jde tedy o signály, které nejsou nikam dále pøipojeny a není z nich odvozen žádný další signál. (U tìchto signálù se pøedpokládá, že budou napø. pøipojeny ke vstupùm posuvného registru v pøípadì programu HILDO) 
 
<UL>
<LI>
Pøíklad:<BR>
A=B +  /(C D)<BR>
C= X + /B<BR>
Vstupy obvodu jsou B, D, X a výstupem je signál A.<BR>
</UL> 
V pøípadì, že popis obvodu obsahuje chyby, je analýza neúspìšná a popsaný obvod nelze použít k simulaci jeho chování v zapojení s LZPR nebo pro nìj generovat test programem TEST . O chybì je uživatel informován ve výsledkovém okénku spolu s výpisem øádku, na kterém došlo k chybì.  Mohou nastat dva druhy chyb: 
<OL type="a">
<LI> Chyba zpùsobená nedodržením gramatiky jazyka pøi popisu obvodu (syntaktická chyba)  
<LI> Chyba zpùsobená opìtovným pøiøazením výrazu signálu (sémantická). Nastane v pøípadì, že signál se nachází na více než jedom øádku popisu na levé stranì, tzn. jsou mu souèasnì pøiøazeny dva rùzné výrazy.
</OL>
<UL>
<LI>Pøíklad:<BR>
A=B+C<BR>
D=BE<BR>
A=F /G<BR>
Chyba - Signálu A je pøiøazen výraz "B+C"  a  "F /G" souèasnì.<BR>
</UL>
</P>
<P align="justify"><BIG>Popis synchronních sekvenèních obvodù</BIG><BR>
Jazykem pro popis obvodù je možné popsat i sekvenèní obvody, tedy obvody, kde hodnota výstupu nezáleží
 pouze na okamžitém stavu vstupních signálù, ale i na pøedchozích stavech. Aby k takovému chování obvodu mohlo dojít,
 musí nutnì obsahovat zpìtné vazby anebo zpožïovací èleny (obvody D) na pøímé cestì od vstupù k výstupùm.
 Po analýze popsaného obvodu, když už je pøeložen do vnitøní reprezentace ve formì orientovaného grafu,  
je nutné zjistit, zda tento graf obsahuje cykly a popsaný obvod  tím pádem obsahuje zpìtné vazby. 
Zpìtnovazební signály jsou automaticky nalezeny a do místa jejich pøipojení je programem vložen  obvod D. 
Kdyby zpìtné vazby nebyly tímto D obvodem pøerušeny, nebylo by možné vyhodnotit rovnice výstupních signálù, 
protože výpoèet by se zacyklil. Jediným øešením by pak bylo provést vyhodnocení zpùsobem, který se používá  v 
simulaèních programech a je založen na sledování ustálení všech hodnot bìhem simulaèního cyklu, v kterém se 
pohybuje v tzv. mikroèase s pøírustky delta.  Dùsledkem mého pøístupu je, že nelze popsat asynchronní sekvenèní obvody.
Všechny popsané sekvenèní obvody se tedy budou chovat jako synchronní a pøi každém taktu získá zpìtnovazební 
signál hodnotu pøiøazeného výrazu vyhodnoceného v taktu minulém. Automatické vkládání D obvodù do zpìtné vazby 
mùže pøinést ale i neèekané problémy, pokud je tento zpìtnovazební signál dále vìtven a pøímo použit k výpoètu 
"sama sebe". Vysvìtlení a podrobnìjší zamyšlení je popsáno <A href="#ss">dále</a>. 
D obvody je umožnìno vkládat pøímo v popisu obvodu pomocí operátoru "#". 
Tak je také možné vytváøet zpoždìné signály. 
<UL>
<LI>Pøíklad:<BR>
Výstup obvodu Y bude odpovídat o dva takty opoždìnému signálu A.<BR>
X= #A<BR>
Y= #X<BR>
<IMG src="image2.gif">
</UL>
Jak je zøejmé z pøedešlého popisu, každý pøeložený sekvenèní obvod obsahuje alespoò jeden obvod D.  Takový D obvod ale pøi prvním provedení taktu obvodu "neví", jakou hodnotu má zapamatovanou z minulého taktu, protože žádný minulý takt ještì nikdy nebyl. Proto je nutné po pøeložení obvodu ještì pøedtím, než bude použit pro pøipojení  k LZPR, zadat poèáteèní stavy všech signálù, které vstupují do D obvodù. (nemusí jít nutnì jen o zpìtnovazební signály)
<UL>
<LI>
Pøíklad:<BR>
X= #A<BR>
Yb=/XZ + /ZX<BR>
Z= #Yz<BR>
Y=Yb<BR>
Yz=Y<BR>
<IMG src="image1.gif">
</UL>
V pøíkladu 2.4 bude tøeba zadat poèáteèní hodnotu vstupního signálu A a signálu Yz. Pøi prvním taktu obvodu potom signál Z nabude poèáteèní hodnotu signálu Yz a signál X poèáteèní hodnotu signálu A.  Pro další takt bude "zapamatována" aktuální hodnota na vstupu a na signálu Yz. Tìchto hodnot signály X a Z nabudou v dalším taktu a tak dále.  <BR>
<hr>
<P align="justify">
<BIG>Pøíklady popisu kombinaèních obvodù a odlišnosti jednotlivých zpùsobù popisu</BIG><BR>
<UL>
<LI><b>Použití negace a závorek</b><BR>
Y=/AB není totéž co Y=/(AB) . V prvním pøípadì bude negován pouze první signál, tedy A. V druhém pøípadì jde o negaci celé závorky. Rovnice jsou vyhodnocovány zleva doprava.
<UL>
<LI>Y=/AB<BR><IMG src="i1.gif"><BR>.<BR>
<LI>Y=/(AB)<BR><IMG src="i2.gif">
</UL>
<LI><b>Celý obvod popsaný jedinou rovnicí</b><BR>
Funkce obou níže uvedených obvodù je zcela ekvivalentní. Rozdíl je pouze v tom, že u prvního obvodu je 
jeho celá funkce definována jediným pøiøazením a složitou rovnicí. V druhém pøípadì popis odráží 
skuteènou strukturu obvodu realizujícího takovou funkci. Jsou zde zavedeny vnitøní vodièe E a F. 
Pokud se zvolí druhá forma popisu s vnitøními vodièi, lze napø. injektovat poruchy na tìchto vodièích a 
obvod není chápán jako "krabièka, do které nevidíme a známe jen funkci". 
<UL>
<LI>Y=/(A+/(CD))+B<BR><IMG src="image5.gif"><BR>.<BR>
<LI>E=/(CD)<BR>
F=/(E+A)<BR>
Y=F+B<BR><IMG src="image6.gif"><BR>
</UL>
<LI><big>Vìtvení signálu</big><BR>
Vìtvení signálu je možné popsat jednoduchým zpùsobem. 
Díky pojmenování vnitøních signálù, vìtvení signálu a oznaèení všech jeho vìtví lze popsat skuteènou strukturu testovaného obvodu a pomocí  HILDO nebo programu TEST pro výpoèet testovacích vektorù tedy potom generovat strukturní test. Obrázek a odpovídající kód ukazuje popis rozvìtvení signálu A na ètyøi další signály.
<UL>
<LI>B=A<BR>C=A<BR>D=A<BR>E=A<BR><IMG src="image8.gif"><BR>
</UL> 
Problém mùže nastat s vìtvením výstupního signálu, pokud se vìtvený signál nerozdìlí na dva další, ale pouze se "vezme jedna odnož". V tom pøípadì není takový vìtvený signál nalezen jako výstupní signál, ale je brán jako signál vnitøní, protože na jeho hodnotì závisí hodnota jiného signálu. Výstupní signál se pøi vìtvení ocitá na pravé stranì rovnice a tudíž nemùže být jako výstupní nalezen a identifikován. <BR>
Následující pøíklad ukazuje , jak správnì tak, aby byly nalezeny oba výstupní signály, a nesprávnì popsat obvod, kde oba výstupní  signály nejsou zámìrnì pojmenovány
<UL>
<IMG src="image9.gif" align="top">
<LI><i>Správnì:</i><BR>
Y1=AB<BR>
Y2=Y1<BR>
Y=Y1<BR>
Yneg=/Y2<BR>
<LI><i>Špatnì:</i><BR>Y=AB<BR>Yneg = /Y
<LI><i>Špatnì:</i><BR>Y=AB<BR>Y2=Y<BR>Yneg=/Y2
</UL>
V obou špatných pøípadech bude nalezen pouze jeden výstupní signál a to Yneg. Signál Y nebude považován za výstupní, ale pouze za vnitøní. Skuteènou strukturu obvodu popisuje pouze první správný popis, který výstupní signál z obvodu AND vìtví na dva další signály - Y2  a Y. <BR>
</P>
<LI><B>Další pøíklad vìtvení</b><BR>
<table align="center" cellpadding="20">
<tr>
<TD valign="middle">
<IMG src="image7.gif" align="top">
</td>
<td>
<u>Popis 1:</u><BR>
A1=A<BR>
A2=A<BR>
B1=B<BR>
B2=B<BR>
Aneg=/A1<BR>
Bneg=/B1<BR>
B3=B2<BR>
B4=B2<BR>
C=Aneg B3<BR>
D=A2 Bneg<BR>
D1=D<BR>
D2=D<BR>
X=C D1<BR>
Y=B4 + D2<BR>
</td>
<td valign="top">
<u>Popis 2:</u><BR>
Aneg=/A<BR>Bneg=/B<BR>C=Aneg B<BR>D=Bneg A<BR>X=CD<BR>Y=B + D
</td>
</tr>
</table>
Obvod popsaný rovnicemi v popisu2 se bude chovat stejnì jako obvod podle popisu1, 
ale nebude možné simulovat poruchy na jednotlivých vìtvích signálù A,B a D. 
Slovník poruch, vzniklý zjištìním pøíznakù po provedení N taktù, bude tedy øidší, protože nebude obsahovat pøíznaky pro poruchy A1/t0, A1/t1, D1/t0 ….
<LI><B>Dvoubitová sèítaèka</b><BR>
<PRE>
Vstupy:		A0,A1 (první sèítanec) 
		B0,B1 (druhý sèítanec)
		Q (pøenos)
Výstupy:	S0 (nižší bit souètu)
		S1 (vyšší bit souètu)
		P (pøenos)

</PRE>
<table  align="center">
<tr>
<td valign="middle">
<PRE>
S01=A0 /B0 /Q
S02=/A0 B0 /Q
S03=/A0 /B0 Q
S04=A0 B0 Q
S0=S01 + S02 + S03 + S04
P01=A0 B0
P02=A0 Q
P03=Q B0
P0=P01 + P02 + P03 
S11=A1 /B1 /P0
S12=/A1 B1 /P0
S13=/A1 /B1 P0
S14=A1 B1 P0
S1=S11 + S12 + S13 + S14
P11=A1 B1
P12=A1 P0
P13=P0 B1
P=P11 + P12 + P13
</pre>
</td>
<td>
<img src="scitacka.gif">
</td>
</tr>
</table>

</UL>
.
</P>
<hr width="100%">
<P align="justify"><big>Pøíklady popisu synchronních sekvenèních obvodù </big><BR>
<UL>
<LI>Výstup obvodu je nonekvivalence hodnoty výstupu v minulém taktu a hodnoty vstupu A<BR>
Obvod má tuto funkci:  Y<sub>N</sub> = A xor Y<sub>N-1</sub><BR>
<table cellpadding="20">
<tr>
<td>X=/A B + A /B<BR>Y=X<BR>B=X
</td>
<td><img src="image10.gif"></td>
</tr>
</table>

Hodnota signálu X závisí na signálu B a ten závisí na signálu X. Pøi vyhodnocování by došlo k zacyklení, proto je mezi signál B a X automaticky vložen D obvod.<BR>
<LI><P align="justify"><b>Vkládání D obvodù</b><BR>
Vložení D-obvodu se provede pomocí unárního operátoru "#". 
Za tímto operátorem musí následovat identifikátor signálu. 
Není možné, aby za operátorem "#" následoval celý výraz. 
V takovém pøípadì oznámí pøekladaè pøi analýze chybu. 
Všechna tøi pøíøazení v pøíkladu níže jsou tedy chybná. Proè jsou chybná a nebylo by možné použít takové zápisy ? 
Problém je v tom, že pøed provedením prvního taktu musí už mít D obvod "zapamatovanou" nìjakou hodnotu z taktu 
pøedchozího. Žádný takový takt pøed prvním ale nebyl proveden, proto se program pøed zapojením obvodu k LZPR dotáže 
na poèáteèní hodnoty všech signálù vstupujících do D-obvodù. Je zøejmé, že zadat poèáteèní hodnotu D-obvodù 
vytvoøených pøiøazením v tìchto pøíkladech není žádným zpùsobem možné, protože bychom se museli dotazovat na poèáteèní hodnotu celých výrazù.
<UL><LI><P align="left">Pøíklady <b>chybných</b> pøíøazení:<BR>
Y = #(A+B)<BR>
Y=#/A<BR>
Y=##A<BR> 
Y=#(A+#C)<BR></P>
<LI>Popis jednoduchého sekvenèního obvodu, pøièemž D-obvod do zpìtné vazby (signál Z) zde není vložen automaticky, ale pøímo v kódu popisujícím obvod.<BR>
<table cellpadding="20">
<tr>
<td>X=E+F<BR>
E=/A + Z1<BR>
F=Z2 B<BR>
Z= #X<BR>
Z1=Z<BR>
Z2=Z<BR>
Y=X<BR>
</td>
<td><img src="image12.gif"></td>
</tr>
</table>
</UL>  
<LI><b>Vytvoøení posuvného registru </b><BR>
Obvod v tomto pøíkladu je sekvenèní, aèkoliv neobsahuje žádné zpìtné vazby (v popisu, tedy mimo "vnitøek" D-obvodù). Tøi D obvody zde tvoøí krátký posuvný registr. Signál D odpovídá o tøi takty zpoždìnému vstupnímu signálu A. Výstup Y je ve stavu log. 1, pokud tøi poslední hodnoty vstupního signálu A byly log. 1.<BR>
Pro výstup Y platí rovnice Y<sub>N</sub> = A<sub>N-1</sub> A<sub>N-2</sub> A<sub>N-3</sub><BR>
<table cellpadding="20">
<tr>
<td>B= #A<BR>
C= #B<BR>
D= #C<BR>
C2=C<BR>
B2=B<BR>
Y=D C2 B2<BR>
</td>
<td><img src="image11.gif"></td>
</tr>
</table>
<A name="#ss">
<LI><p align="justify"><b>Problémy pøi vìtvení zpìtnovazebního signálu.</b> Jak je vyøešit.<BR>
Pøi hledání zpìtných vazeb, které následuje po pøekladu, program postupuje od výstupu postupnì ke vstupùm hledáním DFS v grafu obvodu a pamatuje si signály, které dosud prošel. Narazí-li na signál, který už byl jednou nalezen, je zøejmé, že se ocitl v cyklu. Tento cyklus je pøerušen automatickým vložením D-obvodu. Na správné vložení D-obvodu však nelze spoléhat. Pøíklad níže ukazuje nesprávný popis sekvenèní sèítaèky, která v každém taktu seète dva vstupní bity A a B a k nim pøiète  pøenos P generovaný v minulém taktu. V èem je chyba ? Hledání zpìtné vazby zaène od signálu S. Jeho hodnota je získána výpoètem rovnice, která obsahuje signály A,B a P. Zde ještì nejsme v cyklu. Jde se dál a zkoumají se signály A a B. Ty jsou odhaleny jako vstupní signály. Pokraèuje se signálem P. Jeho hodnota závisí na A, B a P. Tady byl nalezen cyklus. Do místa, kde v datové reprezentaci signál P závisí na své vlastní hodnotì, je vložen D-obvod .  A tady právì dochází k chybì, protože D-obvod mìl být vložen už do datové struktury rovnice pro vyhodnocení signálu S. Zde tedy automatické vkládání D-obvodu programem pøi analýze selhává a je tøeba obvod dokonale popsat vèetnì umístìní D-obvodù. 
Jak si program chybnì popsaný obvod bude pøedstavovat, ukazuje levý obrázek. Chyba se projeví napøíklad pøi sèítání A=1 B=1 P<sub>N-1</sub>=0. Správný výsledek má být S=0, ale bude S=1.  Protože P=AB +…  a A=B=1, bude platit P=1. Do rovnice pro S se za P dosadí rovnou tato hodnota, tedy P=1, která se sem mìla dostat až v pøíštím taktu. Správnì, v pøíštím taktu, se pøenese pouze do rovnice pro výpoèet P. Z levého obrázku je to zøejmé.
<table cellpadding="35">
<tr>
<td><img src="image13.gif"> 
</td>
<td><img src="image14.gif"></td>
</tr>
<tr>
<td>
<u>Nefunkèní sekvenèní sèítaèka</u><BR>
S = A B P + /A /B P + /A B /P + A /B /P<BR>
P = A B + A P + P B
</td>
<td>
<u>Funkèní sekvenèní sèítaèka</u><BR>
S = A B Z + /A /B Z + /A B /Z + A /B /Z<BR>
P = A B + A Z + Z B<BR>
Z = #P<BR>
</td>
</tr>
</table>
Logické funkce f a f2 odpovídají rovnicím pro výpoèet S a P 
</UL>
</BODY>
</HTML>
