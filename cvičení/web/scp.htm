<HTML>
<HEAD>
<TITLE></TITLE>
<META name="description" content="">
<META name="keywords" content="">
<META name="generator" content="CuteHTML">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080">
Srovnání uživatelského rozhraní dvou programù pro demonstraci metody HILDO<BR>
Návrhy øešení nedostatkù<BR>
Jazyk pro popis testovaných obvodù
<P align="justify"><BIG>Úvod</big><BR> 
Ve své zápoètové práci z pøedmìtu styk èlovìka s poèítaèem se budu zabývát uživatelským rozhraním programù, které jsem vytváøel v rámci s vé diplomové práce, jejiž téma zní "Výukové pásmo pro diagnostiku a spolehlivost". Nejzajímavìjším z hlediska styku s uživatelem je program pro demonstraci diagnostické metody HILDO, který je právì jedním ze tøí programù pásma, které jsem vytvoøil. Právì popisu uživatelského rozhraní tohoto programu a srovnání s obdobným programem, který vytvoøil jiný student se budu dále vìnovat. Oba programy slouží ke stejnému úèelu a mají obdobné možnosti. Úroveò zpracování uživatelského rozhraní je však podstatnì rùzná a 

<P align="justify"><BIG>Profil typického uživatele</big><BR> 
Typický pøedpokládaný uživatel aplikací je student pøedmìtu Diagnostika a spolehlivost. U takového uživatele se mùžu spolehnout, že jde poèítaèovì gramotného èlovìka, navíc zabývajícícho se problematikou výpoèetní techniky, takže z toho plyne, že v návodech k programu i pøi návrhu uživatelského rozhraní mùžu zanedbat pøípad použití programu uživatelem, který je zcela neznalý prostøedí Windows a ovládábí pomocí jejich GUI. Promyšlení , kdo bude koncovým uživatelem, hraje v pøípadì tìchto aplikací dùležitou roli a dost podstatnì urèuje, jak pøistupovat, k nìkterým otázkám, zda uživatel ví, co s programem dìlat a jaká optimální posloupnost akcí vede k požadovanému cíli. Lze napøíklad témìø vylouèit, že uživatel vùbec neví, o co vlastnì v programech jde. Takový uživatel se totiž k programu zøejmì vùbec nedostane a pokud ano nebude mít dùvod ho zpustit a zpustí-li ho snad už, nelze oèekávat, že chce dosáhnout nìjakého konkrétního cíle, takže není podstatné, že ho pøípadnì dosáhne po dlouhém "bloudìní". Naopak ale je tøeba poèítat s tím, že programy spustí uživatel, který problematice rozumí a ví, co znamenají jednotlivé úkony a akci, které program nabízí, ale program nikdy nevidìl, nepøeèetl si ještì návod a netuší, jaké jsou celkové možnosti využití. Zajímavé bude zamìøit se právì na takovéhoto uživatele, protože z vlastní zkušenosti vím, že vlaná vìtšina studentù stejnì neète pøed prvním spuštìním aplikace její návod a radìji se pouští do skoumání programu metodou pokus omyl. Dùsledkem pak bývá, že nìkteré dùležité funkce aplikace ani neobjeví, pøièemž si myslí, že všechny možnosti již zcela zvládli. Pøi analýze obvládání programù se tedy zamìøím na to, zda je snadné pro orientujícícho se uživatele objevit všechny možnosti programù a pro uživatele seznámeného s možnostmi dosáhnout cíle optimálním poètem akcí bez nejakých zbyteèných krokù.


<P align="justify"><BIG> Nedostatky pùvodního programu a jejich možné øešení:</big><BR>
Základní nedostatky zjištìné na základì skušeností studentù s programem:<BR>
<UL>
<LI><P align="justify">Uživatelské menu se nachází ve spodní èásti obrazovky. Volba jednotlivých akcí se provádí stiskem zvýraznìného písmena pøed popisem akce. Nepraktické - Nejprve je tøeba nalézt a prohlédnout možné nabízené akce a když jí mám nalezenou, musím ještì udìlat další dva kroky - zjistit pøíslušné písmeno a potom ho nalézt na klávesnici a stisknout. Navíc zpìtná vazba je nejistá - jak zjistím, zda jsem ¨suteènì stisknul správné písmenko a nepøehmátl jsem se nebio zda nefunguje klávesnice. Mnohem výhodnìjší je použití tlaèítek ovládaných klinkutím myši. Po nalezení požadované akce (tlaèítka) staèí stisknout a nvíc je poskytnuta zpìtná vazba v podobì "promáèknutí tlaèítka" </P>
<LI><P align="justify">Zadání polynomu ve tvaru binárního èísla. Pro výukový program zcela nevhodné. Vyžaduje jeden myšlenkový krok navíc - mapovaní z bin. vektor na reprezentaci polynomem. (1011 = x<sup>3</sup>+x<sup>2</sup>+1). Navrhuji vyøešit zadávání øetìzcem ve tvaru polynomu a ne binárním vektorem. Po zadání vektoru bych oèekával pøekreslení LZPR. LZPR navíc mùže býr zapojen dvìma zpùsoby dle stejného polynomu. Zde není vùbec zøejmé, který typ zapojení se provádí a není zde zmínka o tom, že to mùže být zapojeno i jinak. Oèekával bych možnost obou typù zapojení.
<LI><P align="justify">Poèáteèní stav se zadává jako øetìzec jednièek a nul binární vektor. Nemusí být na první pohled zøejmé, na kterém konci øetìzce je nejvyšší a kde nejnižší rád LZPR. Uživatel, který chce zmìnit jediný bit, musí zadat celý nový stav LZPR, tedy všechny bity. Zadávání stavu LZPR nevíc probíhá na jiném místì, než je LZPR vykreslen a ztrácí se zde tak trochu souvislost.
Navrhuji øešení: Zmìna stavu LZPR se provádí pøímo v nakresleném schámatu LZPR a jdou mìnit jednotlivé bity. Bit se zmìní nejlépe kliknutím myši na jeho zobrazenou hodnotu. Toto øešení pøinese mnohem pøímìjší zadání a ubyde jeden zbyteèný dialog pro zadání stavu, pøièemž využiju stávajícího nakresleného schématu.</P>
<LI><P align="justify">Propojení LZPR a testovaného obvodu (v pùvodním programu pouze sèítaèka). Je podle mého názoru a názoru sudentù, s kteými jsem o programu a jeho rozhraní diskutoval asi nejproblematiètìjším bodem. V pùvodním programu je vyøešeno velmi nepreakticky a z hlediska styku s uživatelem se nejen mnì jeví velmi nepøívìtivì. Provádí se zpápisem texotvého øetìzce vyjadøujícího propojení. Pøípustnými znaky jsou D0 až D7 , 0 a 1. Zadání hodnoty D1 na vstup sèítaèky znamená, že výstupní hodnota z klopného obvodu D1 je pøivedena na tento vstup sèítaèky. Zadání hodnoty výstupu sèítaèky napø. D2 znamená, že na vstup klopného obvodu D2 je pøes pøíslušný XOR pøivedena hodnota z výstupu sèítaèky. Jednotlivá propojení nejsou na obrazovce  vykreslována, takže uživatel nemá žádnou možnost kontroly, že provedl propojení skuteènì tak, jak chtìl. Vezme-li se v úvahu že jde o výuokový program je toto øešení zcela nevhodné. Uživatel si musí nejprve uvìdomit, co kam chce propojit, zjistit si názvy tìchto vývodù, bezchybnì je zapsat a nakonec vìøit, že vše provedl, tak jak chtìl. Není navíc jasné, zda mùžou zùstat nìkteré vývody nepøipojeny a zda výstupy testovaného obvodu lze pøipojit do více míst.</P>
<LI><P align="justify">Simulace - pojmem simulace je zde nazváno hledání cyklu. Už nízev akce je matoucí a vhodnìjší by tedy bylo pojmenování "Hledání cyklu" místo "Simulace". Jednotlivé stavy LZPR jsou zaznamenávány do výstupního souboru. Pøi nové simulaci jsou data ve výstupním souboru pøepsána. Uživatel tedy nemá pøehled o tom, co se dìje, kolik taktù už probìhlo a jakými stavy LZPR prošel. To si mùže ovìøit až po vylistování vytvoøeného souboru. Jak však uživatel zjistí, zda vùbec k hledání cyklu došlo, když už pøedtím jeden výstupní soubor existoval a teï neví, jestli to, co si prohlédne je novì vytvoøený soubor anebo ten pøedchozí, když soubory výstupních dat jsou prakticky dle obsahu nerozeznatelné (tabluka jednièek a nul). Toto øešení považuji tedy také za zcela nevhodné. Navrhuji toto øešení: Nalezené stavy cyklu jsou vypsány spolu s hlášením o nalezení cyklu a jeho délce do výsledkového okna. Z tohoto okna se dají výsledky uložit (aby byla zacována možnost výstupného souboru).</P>
<LI><P align="justify">Vnucení stavu a prodloužení cyklu - Provádí se tak, že nejprve je tøeba zadat vnucovaný stav po stisku klávesy U a potom ještì provést vlastní vnucení a pokraèování v cyklu stiskem V. Zde je nelogické zadávání vnucované hodnoty. Staèilo by zadat nový stav LZPR, na což již program má dialog pro zadání stavu. Zadávání vnucovaného stavu tedy jen komplikuje uživatelské rohraní a pøidává jeden redundantní pøíkaz. Vnucovaný stav musí rùzný od stavù, kterými již LZPR døíve prošel, jinak k prodloužení cyklu nedojde. Je-li však programu vnucen stav, ve kterém již LZPR jednou byl, uživatel není upozornìn a vnucení stavu a další hledání ceyklu se provede, což je matoucí. Navrhuji vnucování stavu provést stejnì jako zadání nového stavu LZPR a mít jen funkci na hledání prodlouženého cyklu po vnucení, která je spusitelná jen pokud je v LZPR zadán stav, kterým LZPR ještì neprošel</P>


Program je používán již tøetím rokem pøi výuce pøedmìtu diagnostika a spolehlivost.   

Propojení testovaného obvodu a LZPR se provádí pomocí myši. Klinknutím levého tlaèítka do pøíslušného místa se pøipojují výstupy testovaného obvodu k LZPR. Kliknutím pravého tlaèítka se potom pøipojují výstupy LZPR ke vstupùm testovaného obvodu.
Uživatel, který neèetl  dokumentaci zde zøejmì narazí a nebude vìdìt, jak LZPR s obvodem propojit. Domnívám se, že na kliknutí levým tlaèítkem myši, uživatel experimentováním pøíjde, ale propojování pravým tlaèítkem myši nemusí nikoho napadnou, proto si myslím, že zde by se ještì hodilo dodìlat nìjaký typ interaktivní nápovìdy.

Uživatel, který chce  

</BODY>
</HTML>
